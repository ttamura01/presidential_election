separate(date, sep = "-", into = c("year","month","day")) %>%
group_by(year) %>%
mutate("annualized_gdp" = sum(gdp)/4,
) %>%
mutate("gdp" = round(annualized_gdp)) %>%
slice_tail() %>%
filter(year != "2024") %>%
select(year, gdp)
annual_gdp %>%
slice_max(year)
annual_gdp %>%
slice(year)
annual_gdp %>%
max(year)
annual_gdp %>%
filter(year == max(year))
annual_gdp %>%
filter(year == min(year))
dannual_gdp
annual_gdp
annual_gdp[1,]
annual_gdp[1,1]
annual_gdp[1,2]
initial_year <- annual_gdp[1,1]
initial_year
initial_annual_gdp <- annual_gdp[1,2]
initial_annual_gdp
gdp %>%
slice_max(year)
annual_gdp
annual_gdp %>%
slice_max(year)
max(annual_gdp$year)
latest_year <- max(annual_gdp$year)
latest_year
latest_year
annual_gdp %>%
filter(year == latest_year)
latest_annual_gdp <- annual_gdp %>%
filter(year == latest_year) %>%
select(gdp)
latest_annual_gdp
annual_gdp %>%
filter(year == latest_year) %>%
select(gdp)
latest_annual_data <- annual_gdp %>%
filter(year == latest_year) %>%
select(gdp)
latest_annual_data
latest_annual_data$gdp
round(latest_annual_data$gdp,1)
latest_annual_gdp <- round(latest_annual_data$gdp)
latest_annual_gdp
latest_annual_data$gdp
latest_annual_gdp <- latest_annual_data$gdp
latest_annual_gdp
latest_gdp_label <-  comma(round(latest_annual_gdp))
latest_gdp_label
multiple <- latest_annual_gdp/initial_annual_gdp
multiple
gdp_multiple <- round(multiple)
gdp_multiple
# find interval years
years <- interval(initial_date, latest_date)/years(1)
years
# find interval years
years <- interval(initial_year, latest_year)/years(1)
interval(initial_year, latest_year)
initial_year
latest_year
# find interval years
years <- latest_year - initial_year
"latest_year" - "initial_year"
latest_year
min(annual_gdp$year)
initial_year <- min(annual_gdp$year)
interval(initial_year, latest_year)
initial_year
latest_year
interval(initial_year, latest_year) /years(1)
(latest_year) - (initial_year)
as.numeric(initial_year)
as.numeric(latest_year)
as.numeric(latest_year) - as.numeric(initial_year)
years <- as.numeric(latest_year) - as.numeric(initial_year)
years
gdp_multiple
years
(gdp_multiple)^(1/years)
round(((gdp_multiple)^(1/years) - 1)*100, 2)
annual_gdp_growth_rate <-  round(((gdp_multiple)^(1/years) - 1)*100, 2)
annual_gdp_growth_rate
annual_gdp %>%
ggplot(aes(x = year, y = gdp)) +
geom_line() +
scale_y_continuous(
limits = c(0, 27000),
breaks = seq(0, 25000, 5000),
labels = label_comma(accuracy = 0.1))
annual_gdp
annual_gdp$year <- as.Date(annual_gdp$year, format = "%Y")
annual_gdp %>%
ggplot(aes(x = year, y = gdp)) +
geom_line() +
scale_y_continuous(
limits = c(0, 27000),
breaks = seq(0, 25000, 5000),
labels = label_comma(accuracy = 0.1))
annual_gdp %>%
ggplot(aes(x = year, y = gdp)) +
geom_line()
latest_annual_data
latest_annual_data
latest_gdp_label
annual_gdp %>%
ggplot(aes(x = year, y = gdp)) +
geom_line() +
geom_text(data=latest_data, aes(x = latest_annual_data, y = gdp, label = latest_gdp_label, vjust = -0.3))
annual_gdp %>%
ggplot(aes(x = year, y = gdp)) +
geom_line() +
geom_text(data=latest_annual_data, aes(x = latest_annual_data, y = gdp, label = latest_gdp_label, vjust = -0.3))
latest_annual_data
annual_gdp %>%
ggplot(aes(x = year, y = gdp)) +
geom_line() +
geom_text(data=latest_annual_data, aes(x = year, y = gdp, label = latest_gdp_label, vjust = -0.3))
latest_annual_gdp <- latest_annual_data$gdp
latest_annual_data <- annual_gdp %>%
filter(year == latest_year) %>%
select(gdp)
library(tidyverse)
ggplot(mpg, aes(displ, hwy, shape = factor(cyl), colour = cty)) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = factor(cyl), colour = cty)) +
geom_point() +
# Styling individual guides
guides(
shape  = guide_legend(theme = theme(legend.text = element_text(colour = "red"))),
colour = guide_colorbar(theme = theme(legend.frame = element_rect(colour = "red")))
)
ggplot(mpg, aes(displ, hwy, shape = factor(cyl), colour = cty)) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = factor(cyl), colour = cty)) +
geom_point() +
# Styling individual guides
guides(
shape  = guide_legend(theme = theme(legend.text = element_text(colour = "red"))),
colour = guide_colorbar(theme = theme(legend.frame = element_rect(colour = "red")))
)
ggplot(mpg, aes(displ, hwy, shape = factor(cyl), colour = cty)) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = factor(cyl), colour = cty)) +
geom_point()
ggplot(mpg, aes(displ, hwy, shape = factor(cyl), colour = cty)) +
geom_point() +
# Styling individual guides
guides(
shape  = guide_legend(theme = theme(legend.text = element_text(colour = "red"))),
colour = guide_colorbar(theme = theme(legend.frame = element_rect(colour = "red")))
)
library(tidyverse)
data("mtcars")
data(mtcars)
View(mtcars)
mtcars %>%
group_by(cyl) %>%
summarise(average = mean(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(mean_mpg = mean(mpg))
mtcars %>%
group_by(cyl) %>%
summarise(
mean_mpg = mean(mpg),
max_mpg = max(mpg)
)
mtcars %>%
group_by(cyl, gear) %>%
summarise(mean_mpg = mean(mpg))
setwd("/Users/takayukitamura/Documents/R_Computing/presidential_election")
read_csv("voting.csv")
library(tidyverse)
read_csv("voting.csv")
x <- c(-5:5, NA)
x
if_else(x < 0, NA, x)
if_else(x < 0, "negative", "positive", missing = "missing")
factor(sample(letters[1:5], 10, replace = TRUE))
starwars
starwars %>%
mutate(category = if_else(height < 100, "short", "tall", .keep = "used"))
starwars %>%
mutate(category = if_else(height < 100, "short", "tall"), .keep = "used")
starwars %>%
mutate(category = if_else(height < 100, "short", "tall"))
read_csv("voting.csv") %>%
mutate(Winner = if_else(trump_win == 1, Trump, Biden)
read_csv("voting.csv") %>%
read_csv("voting.csv")
elect.us <- read_csv("voting.csv")
elect.us %>%
mutate("Winner" = if_else(trump_win == 1, Trump, Biden))
elect.us %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden"))
elect.us %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden")) %>%
select(State, Winner)
elect.us %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden")) %>%
select(state, Winner)
elect.us <- elect.us %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden")) %>%
select(state, Winner)
elect.us
elect.us %>%
filter(Winner == Biden) %>%
length()
elect.us %>%
filter(Winner == Biden)
elect.us <- elect.us %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden")) %>%
select(state, Winner)
elect.us
elect.us %>%
filter(Winner == "Biden")
elect.us %>%
filter(Winner == "Biden") %>%
length()
elect.us %>%
filter(Winner == "Biden") %>%
length(state)
elect.us
elect.us %>%
group_by(Winner) %>%
summary()
elect.us %>%
group_by(Winner) %>%
summarise(n = length())
elect.us %>%
group_by(Winner) %>%
summarise(n = length(state))
elect.us <- elect.us %>%
rename(State = state) %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden")) %>%
select(State, Winner)
elect.us <- read_csv("voting.csv")
elect.us %>%
rename(State = state)
elect.us %>%
rename(State = state) %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden")) %>%
select(State, Winner)
elect.us <- elect.us %>%
rename(State = state) %>%
mutate("Winner" = if_else(trump_win == 1, "Trump", "Biden")) %>%
select(State, Winner)
elect.us <- elect.us[order(elect.us$State), ]
elect.us
library(usmap)
statepop
elect.us$fips <- statepop$fips
statepop
print(statepop)
a <- statepop
View(a)
statepop %>%
filter(!abbr == PR)
statepop %>%
filter(!abbr == "PR")
a <- statepop %>%
filter(!abbr == "PR")
statepop <- statepop %>%
filter(!abbr == "PR")
elect.us$fips <- statepop$fips
elect.us$abbr <- statepop$abbr
head(elect.us)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE) +
scale_fill_manual(values = c("blue", "red"),
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE) +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden", "Trump"))
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE) +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Trump", "Biden"))
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE) +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump"))
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8) +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump"))
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump"))
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
theme(
legend.title = element_blank()
)
theme(
legend.title = element_blank()
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 Results by State") +
theme(
legend.title = element_blank()
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank()
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank(),
plot.title.position = element_text(size = 25, hjust = 0.5)
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank(),
plot.title.position = element_text(size = 25)
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State", size = 25) +
theme(
legend.title = element_blank()
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State", size = 40) +
theme(
legend.title = element_blank()
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank(),
plot.title.position = "plot"
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank(),
plot.title.position = "panel"
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank(),
plot.title = element_text(size = 25)
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank(),
plot.title = element_text(size = 25, hjust = 0.5)
)
plot_usmap(data = elect.us,
values = "Winner",
labels = TRUE,
alpha = 0.8,
label_color = "white") +
scale_fill_manual(values = c("blue", "red"),
breaks = c("Biden","Trump")) +
labs(title = "US Presidential Election 2020 results by State") +
theme(
legend.title = element_blank(),
plot.title = element_text(size = 25, hjust = 0.5),
legend.position = c(0.36, -0.05),
legend.direction = "horizontal",
legend.key.width = unit(0.8, "in"),
legend.key.height = unit(0.4, "in"),
legend.text = element_text(size = 15)
)
ggsave("us_presidential_election_2020.png", height = 4.5, width = 6)
library(tidyverse)
library(ggtext)
library(scales)
library(glue)
library(patchwork)
library(maps)
library(usmap)
college_votes <- read_csv("https://f.hubspotusercontent30.net/hubfs/7540639/Electoral_College.csv") %>%
rename_all(tolower) %>%
rename(state = full_state, college_votes = electoral_college_votes) %>%
arrange(desc(college_votes))
swing_states <- tribble(~state, ~status,
"Georgia", TRUE,
"Michigan", TRUE,
"Nevada", TRUE,
"North Carolina", TRUE,
"Pennsylvania", TRUE,
"Virginia", TRUE,
"Wisconsin", TRUE)
data <- college_votes %>%
full_join(swing_states, by = "state") %>%
mutate(status = replace_na(status, FALSE)) %>%
mutate(state = tolower(state))
data %>%
mutate(percentage = college_votes/sum(college_votes)*100) %>%
group_by(status) %>%
filter(status == TRUE) %>%
summarise(total_votes = sum(college_votes),total_percentage = sum(percentage) )
states_map <- map_data("state")
data %>%
mutate(state = tolower(state)) %>%
filter(state %in% c("alaska", "hawaii"))
state_centroids <- states_map %>%
group_by(region) %>%
summarize(long = mean(range(long)), lat = mean(range(lat))) %>%
left_join(data, by = c("region" = "state")) %>%
rename(state = region)
map_data <- states_map %>%
left_join(data, by = c("region" = "state")) %>%
rename(state = region)
ggplot() +
geom_polygon(data = map_data, aes(x = long, y = lat, group = group, fill = status), color = "white") +
geom_text(data = state_centroids, aes(x = long, y = lat, label = college_votes), color = "black", size = 3) +
scale_fill_manual(values = c("TRUE" = "red", "FALSE" = "gray"),
labels = c("Non-Swing State", "Swing State")) +
coord_map() +
labs(title = "US Electoral College Votes and Swing States",
subtitle = "7 swing states total college votes: 96, accounts for 17.8% of total votes(442, including Alaska 3, Hawaii 4)") +
theme_minimal() +
theme(
legend.title = element_blank()
)
